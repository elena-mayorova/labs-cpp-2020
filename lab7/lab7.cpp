// lab7.cpp : ВАРИАНТ 11
/*
* 1) Разработать класс Лекарство. Поля: шифр, название, производительность, срок годности при температуре
*    хранения 4-8, 18-22, более 25 градусов (статический массив). Методы: ввод значений полей с клавиатуры,
*    вывод значений полей на экран с пояснениями, функция, определяющая срок годности при температуре T (T передается
*    в функицию как параметр).
*
* 2) Создать два объекта класса: один с помощью обычной переменной, другой - посредством указателя. Вызвать для каждого объекта
*    предусмотренные методы.
*
* 3) Создать статический массив из 3-4 объектов. Вызвать для каждого элемента массива предусмотренные методы.
*
* 4) Освободить память из-под объекта, созданного при помощи указателя.
*/

#include <string>
#include <iostream>

int const n = 3;

class Medicine
{
private:
    int code;                 // шифр
    std::string name;         // название
    std::string manufacturer; // производитель
    int shelfLife[n];         // срок годности при температуре хранения 4 - 8, 18 - 22, более 25 градусов
public:
    void input();
    void output();
    int getShelfLife(int T);  // возвращает срок годности при температуре Т
};

//--------------------------------------------------------------------------------------------------------------------

void Medicine::input()
{
    std::cout << "введите шифр: " << std::endl;
    std::cin >> code;
    std::cout << "введите название: " << std::endl;
    std::cin >> name;
    std::cout << "введите производителя: " << std::endl;
    std::cin >> manufacturer;
    std::cout << "введите срок годности при 4 < T < 8, при 18 < T < 22, при T > 25: " << std::endl;
    for (int i = 0; i < n; i++)
    {
        std::cin >> shelfLife[i];
    }
}

//--------------------------------------------------------------------------------------------------------------------

void Medicine::output()
{
    std::cout << "шифр: " << code <<std::endl;
    std::cout << "название: " << name << std::endl;
    std::cout << "производитель: " << manufacturer << std::endl;
    std::cout << "срок годности при 4 < T < 8, при 18 < T < 22, при T > 25 равен: " << std::endl;
    for (int i = 0; i < n; i++)
    {
        std::cout << shelfLife[i] << " ";
    }
    std::cout << std::endl;
}

//--------------------------------------------------------------------------------------------------------------------

int Medicine::getShelfLife(int T)
{
    if (T >= 4 && T <= 8) return shelfLife[0];
    if (T >= 18 && T <= 22) return shelfLife[1];
    if (T >= 25) return shelfLife[2];
    return -1;
}

//--------------------------------------------------------------------------------------------------------------------

int main()
{
    setlocale(LC_ALL, "Russian");

    int T = 10;
    
    Medicine x;
    x.input();
    x.output();
    std::cout << "срок годности при температуре " << T << " равен: " << x.getShelfLife(T) << std::endl;

    Medicine* y = new Medicine;
    y->input();
    y->output();
    T = 15;
    std::cout << "срок годности при температуре " << T << " равен: " << y->getShelfLife(T) << std::endl;
 
    int const m = 3;
    Medicine array[m];

    T = 26;
    for (int i = 0; i < m; i++)
    {
        std::cout << "элемент № " << i << std::endl;
        array[i].input();
    }

    for (int i = 0; i < m; i++)
    {
        std::cout << "элемент № " << i << std::endl;
        array[i].output();
    }

    for (int i = 0; i < m; i++)
    {
        std::cout << "Срок годности элемента № " << i <<" при T = " << T << std::endl;
        std::cout<< array[i].getShelfLife(T) << std::endl;
    }

    delete y;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
