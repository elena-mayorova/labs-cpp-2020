// lab10.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
/*
   ЛАБОРАТОРНАЯ РАБОТА 10
   1) Создать класс динамический массив типа char. Помимо необходимых полей он должен содержать конструктор по умолчанию, функцию ввода
      с клавиатуры (при необходимости - с проверкой) и функцию вывода на экран. Если необходимо - деструктор.
   2) Добавить в определение класса перегрузку оператора присваивания (=). Создать и инициализировать несколько объектов класса (число объектов
      и способ инициализации - по мере необходимости). Протестировать перегрузку, проверяя соответствие заданных и выведенных на экран данных.
      Каждое тестирование начинать с вывода всех операндов, после выполнения операции повторять вывод. Подробные комментарии обязательны.
   3) Добавить перегрузку операции объект += число. Протестировать перегрузку способом, указанным в пункте 2. Перегружать с помощью
      дружественной функции.
   4) Добавить перегрузку операции равно (==) для двух объектов класса. Протестировать перегрузку способом, указанным в пункте 2.
      Перегружать с помощью метода класса.
   5) Добавить перегрузку объект /= s - Ищет в массиве символ s и возвращает позицию первого вхождения. С помощью дружественной функции.
   6) Добавить перегрузку объект * s - увеличивает длину массива на 1 элемент и записывает в него значение символа s. С помощью
      метода класса.
*/
 
#include <iostream>

class TMyClass
{
    int numberInDynamic;
    char* dynamicArray;

public:
    void input();
    void output();

    TMyClass(int xnumberInDynamic = 5, char xdynamicArray = 'w');
    ~TMyClass();

    TMyClass& operator = (TMyClass& object);                     //оператор присваивания
    friend TMyClass& operator += (TMyClass& object, int number); //увеличивает код ASCII символа на заданное число (друж. функция)
    bool operator == (TMyClass& object);                         //оператор сравнения
    friend int operator /= (TMyClass& object, char symbol);      //ищет в массиве символ, возвращает позицию первого вхождения (друж. функция)
    TMyClass& operator * (char symbol);                          //увеличивает длину массива на 1 элемент и записывает в него значение символа
};
//-------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------
// реализации конструктора по умолчанию и деструктора
TMyClass::TMyClass(int xnumberInDynamic, char xdynamicArray)
{
    numberInDynamic = xnumberInDynamic;
    dynamicArray = new char[numberInDynamic];

    for (int i = 0; i < numberInDynamic; i++)
        dynamicArray[i] = xdynamicArray;
}
//-------------------------------------------------------------------------------------------------------------------------------
TMyClass::~TMyClass()
{
    delete[] dynamicArray;
}
//-------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------
// реализации методов
void TMyClass::input()
{
    delete[] dynamicArray;

    std::cout << "Введите кол-во эл-тов в динамическом массиве:" << std::endl;
    do
    {
        if ((std::cin >> numberInDynamic).good() && numberInDynamic > 0)
            dynamicArray = new char[numberInDynamic];
        else if (std::cin.fail()) 
        {
            std::cin.clear();
            std::cout << "Ошибка! Введите числовое значение" << std::endl;
        }
        else std::cout << "Ошибка! Введите положительное число" << std::endl;

        std::cin.ignore(100, '\n');
    } while (!(numberInDynamic > 0 && std::cin.good()));

    for (int i = 0; i < numberInDynamic; i++)
    {
        std::cout << "Введите элемент № " << i << std::endl;
        std::cin >> dynamicArray[i];
    }
}
//-------------------------------------------------------------------------------------------------------------------------------
void TMyClass::output()
{
    std::cout << "Кол-во эл-тов в динамическом массиве:" << numberInDynamic << std::endl;
    std::cout << "Динамический массив:" << std::endl;
    for (int i = 0; i < numberInDynamic; i++)
        std::cout << dynamicArray[i] << " ";
    std::cout << std::endl;
}
//-------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------
//оператор присваивания
TMyClass& TMyClass::operator = (TMyClass& object)
{
    delete[] dynamicArray;
    numberInDynamic = object.numberInDynamic;
    dynamicArray = new char[numberInDynamic];

    for (int i = 0; i < numberInDynamic; i++)
        dynamicArray[i] = object.dynamicArray[i];
    return *this;
}
//-------------------------------------------------------------------------------------------------------------------------------
//увеличивает код ASCII символа на заданное число (друж. функция)
TMyClass& operator += (TMyClass& object, int number)
{
    for (int i = 0; i < object.numberInDynamic; i++)
        object.dynamicArray[i] += number;
    return object;
}
//-------------------------------------------------------------------------------------------------------------------------------
//оператор сравнения
bool TMyClass::operator ==(TMyClass& object)
{
    int count = 0;
    for (int i = 0; i < numberInDynamic; i++)
        if (dynamicArray[i] == object.dynamicArray[i]) count++;
    if (count == numberInDynamic && count == object.numberInDynamic) return true;
    else return false;
}
//-------------------------------------------------------------------------------------------------------------------------------
//ищет в массиве символ, возвращает позицию первого вхождения (друж. функция)
int operator /= (TMyClass& object, char symbol)
{
    for (int i = 0; i < object.numberInDynamic; i++)
        if (object.dynamicArray[i] == symbol) return i;
    return -1;
}
//-------------------------------------------------------------------------------------------------------------------------------
//увеличивает длину массива на 1 элемент и записывает в него значение символа
TMyClass& TMyClass::operator * (char symbol)
{
    int n = numberInDynamic + 1;
    char* tempArray = new char[n];

    for (int i = 0; i < n - 1; i++)
        tempArray[i] = dynamicArray[i];
    tempArray[n-1] = symbol;
    
    delete[] dynamicArray;
    numberInDynamic = n;
    dynamicArray = new char[numberInDynamic];
   
    for (int i = 0; i < n; i++)
        dynamicArray[i] = tempArray[i];
    return *this;
}
//-------------------------------------------------------------------------------------------------------------------------------

int main()
{
    setlocale(LC_ALL, "Russian");
    
    //-------------------------------------------------------------------------------------------------------------------------------
    std::cout << "1) ОПЕРАТОР ПРИСВАИВАНИЯ ТЕСТ" << std::endl;
    std::cout << std::endl;

    TMyClass test1;
    test1.input();
    std::cout << "test1 введенные данные: " << std::endl;
    test1.output();
    std::cout <<  std::endl;

    TMyClass test2;
    test2.input();
    std::cout << "test2 введенные данные: " << std::endl;
    test2.output();
    std::cout << std::endl;

    TMyClass test3;
    test3.input();
    std::cout << "test2 введенные данные: " << std::endl;
    test3.output();
    std::cout << std::endl;

    test2 = test3;
    std::cout << "test2 = test3: " << std::endl;
    test2.output();
    std::cout << std::endl;

    //-------------------------------------------------------------------------------------------------------------------------------
    std::cout << "2) ОПЕРАТОР объект += число ТЕСТ - увеличивает код ASCII символа на заданное число" << std::endl;
    std::cout << std::endl;

    std::cout << "test1 начальные данные: " << std::endl;
    test1.output();
    int test = 1;
    std::cout << "увеличиваем на " << test << std::endl;
    test1 += test;
    std::cout << "test1 новые данные: " << std::endl;
    test1.output();
    std::cout << std::endl;
  
    //-------------------------------------------------------------------------------------------------------------------------------
    std::cout << "3) ОПЕРАТОР СРАВНЕНИЯ == ТЕСТ" << std::endl;
    std::cout << std::endl;

    if (test2 == test2) std::cout << "test2 и test3 равны" << std::endl;
    else std::cout << "test2 и test3 НЕ равны" << std::endl;
    if (test1 == test2) std::cout << "test1 и test3 РАВНЫ" << std::endl;
    else std::cout << "test1 и test3 НЕ равны" << std::endl;
    std::cout << std::endl;
    //-------------------------------------------------------------------------------------------------------------------------------
    std::cout << "4) ОПЕРАТОР /= s ТЕСТ - ищет символ и возвращает позицию первого входа" << std::endl;
    std::cout << std::endl;

    char symbol = 's';
    std::cout << "ищем символ " << symbol << std::endl;

    TMyClass test4;
    test4.input();
    std::cout << "test4 введенные данные: " << std::endl;
    test4.output();
    std::cout << std::endl;

    test = test4 /= 's';
    std::cout << "символ в массиве под номером: " << test <<  std::endl;
    std::cout << std::endl;

    //-------------------------------------------------------------------------------------------------------------------------------
    std::cout << "5) ОПЕРАТОР * s ТЕСТ - увеличивает массив на 1 эл-т и записыват в него значение символа s (можно любой естесно)" << std::endl;
    std::cout << std::endl;

    TMyClass test5;
    test5.input();
    std::cout << "test5 введенные данные: " << std::endl;
    test5.output();

    std::cout << std::endl;

    test5 * 's';
    std::cout << "test5 новые данные: " << std::endl;
    test5.output();
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
