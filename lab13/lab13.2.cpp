// lab13b.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
/*
б). Использование шаблонов классов. Шаблон класса Треугольник 
    (задан стороной и двумя углами – поле x одного типа, а и b - другого). 
    Предусмотреть конструктор по умолчанию, если надо - деструктор, методы ввода, вывода и 
    вычисления длины неизвестных сторон. Продемонстрировать использование на примерах
    параметров типа int-float и float-double.
*/

#include <iostream>
#define _USE_MATH_DEFINES
#include <math.h>

 
class TTriangle
{
    float sideX;
    float angleA;
    float angleB;

public:
    void input();
    void output();
    float sideY();
    float sideZ();

    TTriangle(float xsideX = 3, float xangleA = M_PI/2.0, float xangleB = 53.13*(M_PI/180.0));
};
//------------------------------------------------------------------------------------------------------------------
TTriangle::TTriangle(float xsideX, float xangleA, float xangleB)
{
    sideX = xsideX;
    angleA = xangleA;
    angleB = xangleB;
}
//------------------------------------------------------------------------------------------------------------------
// методы
void TTriangle::input()
{
    std::cout << "Введите сторону X треугольника\n";
    do
    {
        std::cin >> sideX;
        if (sideX <= 0) std::cout << "Сторона не может быть меньше или равна 0.\n Введите корректное значение\n";

    } while (sideX <= 0);

    std::cout << "Введите прилежащие углы треугльника в градусах\n";
    do
    {
        std::cout << "Угол A: = ";
        std::cin >> angleA;
        angleA = angleA * (M_PI / 180.0);
        if (angleA <= 0) std::cout << "Угол не может быть меньше или равен 0.\n Введите корректное значение\n";
        
    } while (angleA <= 0);
    do
    {
        std::cout << "Угол B: = ";
        std::cin >> angleB;
        angleB = angleB * (M_PI / 180.0);
        if (angleB <= 0) std::cout << "Угол не может быть меньше или равен 0.\n Введите корректное значение\n";

    } while (angleB <= 0);
}
//------------------------------------------------------------------------------------------------------------------
void TTriangle::output()
{
    std::cout << "Сторона X: = " << sideX << "\n";
    std::cout << "Сторона Y: = " << sideY() << "\n";
    std::cout << "Сторона Z: = " << sideZ() << "\n\n";

    std::cout << "Угол A: = " << angleA * (180.0/M_PI) << "\n";
    std::cout << "Угол B: = " << angleB * (180.0 / M_PI) << "\n";
    std::cout << "Угол C: = " << 180 - angleA * (180.0 / M_PI) - angleB * (180.0 / M_PI) << "\n\n";
}
//------------------------------------------------------------------------------------------------------------------
float TTriangle::sideY()
{
    return (sideX * sin(angleB)) / sin(angleA + angleB);
}
//------------------------------------------------------------------------------------------------------------------
float TTriangle::sideZ()
{
    return (sideX * sin(angleA)) / sin(angleA + angleB);
}

int main()
{
    setlocale(LC_ALL, "Russian");
   
    TTriangle triangle; // треугольник по умолчанию - египетский
    triangle.output();

    TTriangle triangle1;
    triangle1.input();
    triangle1.output();

}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
